[{"id":"890e5af8.0f3028","type":"tab","label":"KPN Things Cayenne + ElephantSQL Integration","disabled":false,"info":""},{"id":"1b3fd1fd.e45cae","type":"http in","z":"890e5af8.0f3028","name":"LoRa Post Catcher","url":"/","method":"post","upload":false,"swaggerDoc":"","x":130,"y":140,"wires":[["cfc518e6.1b0ef8","d7f3da76.b20618"]]},{"id":"a60ffda3.56302","type":"http response","z":"890e5af8.0f3028","name":"LoRa Post Reply","statusCode":"","headers":{},"x":790,"y":120,"wires":[]},{"id":"cfc518e6.1b0ef8","type":"function","z":"890e5af8.0f3028","name":"Data processor KPN developer portal","func":"// objects counted counted in payload\nvar objectCount = msg.payload.length;\n\n// Create variables to hold JSON \nvar msgc = {};\nvar msgp = {};\nvar result = {};\n\n// Prepare http responce\nvar msg200 = {}; // Variable to hold http responce message\nmsg200.payload = \"200\"; // \"200\" for OK\nmsg200.req = msg.req; // req from original msg for http responce node\nmsg200.res = msg.res; // res from original msg for http responce node\n\n// Test if it dat ais KPN format\n// Verification 1: Test for number of objects in array. Shall be > 3\nif( objectCount > 2){\n // Verification 2: test if \"bn\" object is at position 0 of object array\n if (msg.payload[0].hasOwnProperty(\"bn\")) {\n \n // Save original http post message for presenting later\n var rawPost = {};\n rawPost = msg.payload;\n \n // extract devEUI from http post data\n var devEUI = msg.payload[0].bn.split(\":\")[3];\n \n // save headers for specific usage.\n // result.things_devicespecification_uuid = msg.req.headers[\"things-devicespecification-uuid\"];\n // result.things_client_uuid = msg.req.headers[\"things-client-uuid\"];\n // result.things_plug_uuid = msg.req.headers[\"things-plug-uuid\"];\n result.things_message_token = msg.req.headers[\"things-message-token\"];\n \n // Test for payload formatted data\n if( msg.payload[1].n == \"payload\"){\n \n /*----------- data format -------------*/\n \n // This process is using CayenneLPP format\n \n msgp.payload = msg.payload[1].vs; // Payload data for decoding by CayenneLPP decoder\n msgp.rawPayload = msg.payload[1].vs; // Preserve original payload for presenting later\n msgp.rawPost = rawPost; // complete JSON woth htto POST message form KPN portal\n msgp.devEUI = devEUI;\n \n // prepare data for decoding by CayenneLPP decoder \n result.port = msg.payload[2].v;\n // take time in Unix time format in seconds and convert to readable time (MySQL compatible)\n result.locTime = new Date(msg.payload[0].bt*1000).toISOString().slice(0, 19).replace('T', ' ');\n \n msgp.metadata = result;\n node.send([[msg200],null,[msgp]]);\n \n }else if( msg.payload[1].n == \"locOrigin\"){\n \n /*----------- Geo-location format -------------*/\n \n msgc.devEUI = devEUI;\n \n result.rawPost = rawPost;\n result.locOrigin = msg.payload[1].vs;\n result.latitude = msg.payload[2].v;\n result.longitude = msg.payload[3].v;\n result.radius = msg.payload[4].v;\n // take time in Unix time format and convert to readable time (MySQL compatible)\n result.locTime = new Date(parseInt(msg.payload[7].vs)).toISOString().slice(0, 19).replace('T', ' ');\n \n msgc.payload = result;\n node.send([[msg200],[msgc],[null]]);\n \n }else{\n // Wrong payload: ignore!\n }\n }\n}\n","outputs":3,"noerr":0,"initialize":"","finalize":"","x":430,"y":240,"wires":[["a60ffda3.56302"],["c65b280a.2e40a8"],["14cb76cc.665db9","53d1a535.707a5c"]],"info":"--------------------------------------------------------------------\nThis Node is part of the PE1MEW Node-Red KPN developer POST application.\n\nThe PE1MEW Node-Red KPN developer POST application is free software: \nyou can redistribute it and/or modify it under the terms of a Creative \nCommons Attribution-NonCommercial 4.0 International License \n(http://creativecommons.org/licenses/by-nc/4.0/) by \nPE1MEW (http://pe1mew.nl) E-mail: pe1mew@pe1mew.nl\n\nThe PE1MEW KPN developer POST application is distributed in the hope that \nit will be useful, but WITHOUT ANY WARRANTY; without even the \nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR \nPURPOSE.\n--------------------------------------------------------------------\n\n\\brief Receive http POST data from KPN developer portal\n\\date 12-1-2020\n\\author Remko Welling (pe1mew@pe1mew.nl)\n\\version See version history\n\n## Verion history\n\nversion | Date | Athour | Notes\n--------|-----------|--------|-----------------------------------\n1.0 | 12-1-2020 | PE1MEW | First release\n\n## ToDo\n\n1: Add authentication method\n"},{"id":"10905cf3.a48a63","type":"comment","z":"890e5af8.0f3028","name":"Correct data will receive \"200\"","info":"","x":400,"y":140,"wires":[]},{"id":"45fd2936.0a07e8","type":"function","z":"890e5af8.0f3028","name":"Payload MQTT sender","func":"// Set parameters for MQTT\n\n// Change the UserName and ClientId for your own Cayenne values.\nmqttUserName = '9f023df0-33ba-11eb-a2e4-b32ea624e442';\nmqttClientId = '054db080-33ca-11eb-b767-3f1a8f1211ba';\n\nmsg2 = {};\nmsg2.qos = 0;\nmsg2.retain = false;\n\n// Send metadata\n msg2.topic = \"v1/\" + mqttUserName + \"/things/\" + mqttClientId + \"/data/\" + msg.payload.channel;\n msg2.payload = msg.payload.type + \",\" + msg.payload.unit + \"=\" + msg.payload.value;\n node.send(msg2);","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1080,"y":260,"wires":[["875c2da4.db895"]],"info":"--------------------------------------------------------------------\nThis Node is part of the PE1MEW Node-Red KPN developer POST application.\n\nThe PE1MEW Node-Red KPN developer POST application is free software: \nyou can redistribute it and/or modify it under the terms of a Creative \nCommons Attribution-NonCommercial 4.0 International License \n(http://creativecommons.org/licenses/by-nc/4.0/) by \nPE1MEW (http://pe1mew.nl) E-mail: pe1mew@pe1mew.nl\n\nThe PE1MEW KPN developer POST application is distributed in the hope that \nit will be useful, but WITHOUT ANY WARRANTY; without even the \nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR \nPURPOSE.\n--------------------------------------------------------------------\n\n\\brief Send payload data to MQTT\n\\date 12-1-2020\n\\author Remko Welling (pe1mew@pe1mew.nl)\n\\version See version history\n\n## Dependancies\n\nThis node is using port 3 from the \"Data processor KPN developer portal\" node\nthat is decoded by the CayenneLPP decoder node.\n\n## Verion history\n\nversion | Date | Athour | Notes\n--------|-----------|--------|-----------------------------------\n1.0 | 12-1-2020 | PE1MEW | First release\n\n## ToDo\n\n\n"},{"id":"875c2da4.db895","type":"mqtt out","z":"890e5af8.0f3028","name":"","topic":"","qos":"","retain":"","broker":"6c4e37f6.c4a468","x":1290,"y":220,"wires":[]},{"id":"c65b280a.2e40a8","type":"function","z":"890e5af8.0f3028","name":"Location MQTT sender","func":"// Set parameters for MQTT \nmsg2 = {};\nmsg2.qos = 0;\nmsg2.retain = false;\n\n// Send all individual values from struc to MQTT with corresponding topic\nfor (var key in msg.payload){\n msg2.topic = \"kpn/\" + msg.devEUI + \"/location/\" + key;\n msg2.payload = msg.payload[key];\n node.send(msg2);\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","x":1080,"y":180,"wires":[["875c2da4.db895"]],"info":"--------------------------------------------------------------------\nThis Node is part of the PE1MEW Node-Red KPN developer POST application.\n\nThe PE1MEW Node-Red KPN developer POST application is free software: \nyou can redistribute it and/or modify it under the terms of a Creative \nCommons Attribution-NonCommercial 4.0 International License \n(http://creativecommons.org/licenses/by-nc/4.0/) by \nPE1MEW (http://pe1mew.nl) E-mail: pe1mew@pe1mew.nl\n\nThe PE1MEW KPN developer POST application is distributed in the hope that \nit will be useful, but WITHOUT ANY WARRANTY; without even the \nimplied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR \nPURPOSE.\n--------------------------------------------------------------------\n\n\\brief Send Location data to MQTT\n\\date 12-1-2020\n\\author Remko Welling (pe1mew@pe1mew.nl)\n\\version See version history\n\n## Dependancies\n\nThis node is using port 2 from the \"Data processor KPN developer portal\" node\n\n## Verion history\n\nversion | Date | Athour | Notes\n--------|-----------|--------|-----------------------------------\n1.0 | 12-1-2020 | PE1MEW | First release\n\n## ToDo\n\n\n"},{"id":"2aec78d8.abcf18","type":"debug","z":"890e5af8.0f3028","name":"MQTT topic , payload","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1080,"y":340,"wires":[]},{"id":"d7f3da76.b20618","type":"debug","z":"890e5af8.0f3028","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":350,"y":40,"wires":[]},{"id":"a68500b7.8f345","type":"debug","z":"890e5af8.0f3028","name":"Cayenne payload","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1070,"y":420,"wires":[]},{"id":"14cb76cc.665db9","type":"function","z":"890e5af8.0f3028","name":"Cayennelpp decoder","func":"// https://github.com/FIWARE-GEs/iot-agent.LoraWAN/blob/bfbb71bb24eedbde3beaa610d92c551aa3e12d2d/lib/dataModels/cayenneLpp.js\n'use strict';\n\nconst CAYENNELPP_MAX_CHANNEL = 255;\nconst CAYENNELPP_MIN_SIZE_BYTES = 3;\n\nconst LPP_LUMINOSITY = 101;\nconst LPP_TEMPERATURE = 103;\nconst LPP_RELATIVE_HUMIDITY = 104;\n\nconst LPP_LUMINOSITY_TYPE = 'lum';\nconst LPP_TEMPERATURE_TYPE = 'temp';\nconst LPP_RELATIVE_HUMIDITY_TYPE = 'rel_hum';\n\nconst LPP_LUMINOSITY_UNIT = 'r';\nconst LPP_TEMPERATURE_UNIT = 'c';\nconst LPP_RELATIVE_HUMIDITY_UNIT = 'p';\n\n\nconst LPP_LUMINOSITY_SIZE = 1; // 1 bytes, 1 lux unsigned\nconst LPP_TEMPERATURE_SIZE = 2; // 2 bytes, 0.1Â°C signed\nconst LPP_RELATIVE_HUMIDITY_SIZE = 1; // 1 byte, 0.5% unsigned\n\n  var buffer = Buffer.from(msg.payload, 'hex');\n  if (buffer && validateCayenneLppSize(buffer)) {\n    var cursor = 0;\n    var value;\n    while (cursor < buffer.length) {\n      var channel = buffer.readUInt8(cursor);\n      if (validateCayenneLppChannel(channel)) {\n\t\tvar result = {};\n        cursor++;\n        var type = buffer[cursor];\n        cursor++;\n\n        switch (type) {\n          case LPP_LUMINOSITY:\n            if (cursor + LPP_LUMINOSITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor];\n              cursor++;\n              result.payload = {\n\t\t\t\t  channel : channel,\n                  type    : LPP_LUMINOSITY_TYPE,\n \t\t\t      value   : value,\n                  unit    : LPP_LUMINOSITY_UNIT\n\t\t\t  }\n            }\n            break;\n          case LPP_TEMPERATURE:\n            if (cursor + LPP_TEMPERATURE_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n            //   value = buffer.readInt16BE(cursor) / 10.0;\n            //   cursor += 2;\n              value = buffer[cursor] / 10.0;\n              cursor++;\n\t\t\t  result.payload = {\n\t\t\t\t  channel : channel,\n\t\t\t\t  type    : LPP_TEMPERATURE_TYPE,\n\t\t\t\t  value   : value,\n                  unit    : LPP_TEMPERATURE_UNIT\n\t\t\t  };\n            }\n            break;\n          case LPP_RELATIVE_HUMIDITY:\n            if (cursor + LPP_RELATIVE_HUMIDITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              value = buffer[cursor];\n              cursor++;\n              result.payload = {\n\t\t\t\t  channel : channel,\n                  type    : LPP_RELATIVE_HUMIDITY_TYPE,\n  \t\t\t      value   : value,\n                  unit    : LPP_RELATIVE_HUMIDITY_UNIT\n\t\t\t  }\n            }\n            break;\n        } // end switch\n\t\tnode.send(result);\n      } else {\n        throw new Error('Invalid CayennLpp channel');\n      }// endif\n    } // end while loop\n  } else {\n    throw new Error('Invalid CayennLpp buffer size');\n  } // endif \n\n\n\n/**\n * It validates the size of a CayenneLpp message\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppSize(buffer) {\n  var result = false;\n  if (buffer && buffer.length >= CAYENNELPP_MIN_SIZE_BYTES) {\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * It validates the a CayenneLpp channel\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppChannel(channel) {\n  var result = true;\n\n  if (channel > CAYENNELPP_MAX_CHANNEL) {\n    result = false;\n  }\n\n  return result;\n}\n\n/**\n * It reads an integer represented using 24 bits\n *\n * @param      {<type>}  buf     The buffer\n * @param      {number}  offset  The offset\n * @return     {<type>}  { description_of_the_return_value }\n */\nfunction readInt24BE(buf, offset) {\n  return buf.readIntBE(offset, 3);\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":800,"y":340,"wires":[["45fd2936.0a07e8","2aec78d8.abcf18","a68500b7.8f345"]]},{"id":"a6879e29.ecdb4","type":"template","z":"890e5af8.0f3028","name":"INSERT","field":"query","fieldType":"msg","format":"handlebars","syntax":"mustache","template":"INSERT INTO Metingen(deviceID, datum, lux, temperatuur, luchtvochtigheid)\nVALUES('{{payload.devID}}', now(), {{payload.lux}}, {{payload.temp}}, {{payload.hum}});","output":"str","x":1000,"y":540,"wires":[["f3819c83.a6d93","cef7ca33.7a0818"]]},{"id":"24d242e4.84039e","type":"debug","z":"890e5af8.0f3028","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1410,"y":540,"wires":[]},{"id":"cef7ca33.7a0818","type":"debug","z":"890e5af8.0f3028","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"query","targetType":"msg","statusVal":"","statusType":"auto","x":1210,"y":600,"wires":[]},{"id":"7442ddb.bc5c224","type":"debug","z":"890e5af8.0f3028","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":1010,"y":680,"wires":[]},{"id":"53d1a535.707a5c","type":"function","z":"890e5af8.0f3028","name":"ElephantSQL decoder","func":"// https://github.com/FIWARE-GEs/iot-agent.LoraWAN/blob/bfbb71bb24eedbde3beaa610d92c551aa3e12d2d/lib/dataModels/cayenneLpp.js\n'use strict';\n\nconst CAYENNELPP_MAX_CHANNEL = 255;\nconst CAYENNELPP_MIN_SIZE_BYTES = 3;\n\nconst LPP_LUMINOSITY = 101;\nconst LPP_TEMPERATURE = 103;\nconst LPP_RELATIVE_HUMIDITY = 104;\n\nconst LPP_LUMINOSITY_TYPE = 'lum';\nconst LPP_TEMPERATURE_TYPE = 'temp';\nconst LPP_RELATIVE_HUMIDITY_TYPE = 'rel_hum';\n\nconst LPP_LUMINOSITY_UNIT = 'r';\nconst LPP_TEMPERATURE_UNIT = 'c';\nconst LPP_RELATIVE_HUMIDITY_UNIT = 'p';\n\n\nconst LPP_LUMINOSITY_SIZE = 1; // 1 bytes, 1 lux unsigned\nconst LPP_TEMPERATURE_SIZE = 2; // 2 bytes, 0.1Â°C signed\nconst LPP_RELATIVE_HUMIDITY_SIZE = 1; // 1 byte, 0.5% unsigned\n\n  var buffer = Buffer.from(msg.payload, 'hex');\n  if (buffer && validateCayenneLppSize(buffer)) {\n    var deviceID = msg.devEUI;\n    var cursor = 0;\n    while (cursor < buffer.length) {\n      var channel = buffer.readUInt8(cursor);\n      if (validateCayenneLppChannel(channel)) {\n        cursor++;\n        var type = buffer[cursor];\n        cursor++;\n\n        switch (type) {\n          case LPP_LUMINOSITY:\n            if (cursor + LPP_LUMINOSITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              valueLux = buffer[cursor];\n              cursor++;\n            }\n            break;\n          case LPP_TEMPERATURE:\n            if (cursor + LPP_TEMPERATURE_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n            //   value = buffer.readInt16BE(cursor) / 10.0;\n            //   cursor += 2;\n              valueTemp = buffer[cursor] / 10.0;\n              cursor++;\n            }\n            break;\n          case LPP_RELATIVE_HUMIDITY:\n            if (cursor + LPP_RELATIVE_HUMIDITY_SIZE > buffer.length) {\n              throw new Error('Invalid CayennLpp message');\n            } else {\n              valueHum = buffer[cursor];\n              cursor++;\n            }\n            break;\n        } // end switch\n      } else {\n        throw new Error('Invalid CayennLpp channel');\n      }// endif\n    } // end while loop\n    var result = {};\n    result.payload = {\n                devID   : deviceID,\n                lux     : valueLux,\n                temp    : valueTemp,\n  \t\t\t    hum     : valueHum\n\t\t\t  }\n    node.send(result);\n  } else {\n    throw new Error('Invalid CayennLpp buffer size');\n  } // endif \n\n\n\n/**\n * It validates the size of a CayenneLpp message\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppSize(buffer) {\n  var result = false;\n  if (buffer && buffer.length >= CAYENNELPP_MIN_SIZE_BYTES) {\n    result = true;\n  }\n\n  return result;\n}\n\n/**\n * It validates the a CayenneLpp channel\n *\n * @param      {<type>}   buffer  The buffer\n * @return     {boolean}  { description_of_the_return_value }\n */\nfunction validateCayenneLppChannel(channel) {\n  var result = true;\n\n  if (channel > CAYENNELPP_MAX_CHANNEL) {\n    result = false;\n  }\n\n  return result;\n}\n\n/**\n * It reads an integer represented using 24 bits\n *\n * @param      {<type>}  buf     The buffer\n * @param      {number}  offset  The offset\n * @return     {<type>}  { description_of_the_return_value }\n */\nfunction readInt24BE(buf, offset) {\n  return buf.readIntBE(offset, 3);\n}","outputs":1,"noerr":0,"initialize":"","finalize":"","x":800,"y":540,"wires":[["a6879e29.ecdb4","7442ddb.bc5c224"]]},{"id":"f3819c83.a6d93","type":"digitaloak-postgresql-query","z":"890e5af8.0f3028","name":"","server":"798ba952.3f8618","inputs":1,"outputs":1,"x":1210,"y":540,"wires":[["24d242e4.84039e"]]},{"id":"6c4e37f6.c4a468","type":"mqtt-broker","name":"CayenneMQTT","broker":"mqtt.mydevices.com","port":"1883","clientid":"98064ca0-4f5b-11eb-8779-7d56e82df461","usetls":false,"compatmode":false,"keepalive":"60","cleansession":false,"birthTopic":"","birthQos":"0","birthRetain":"false","birthPayload":"","closeTopic":"","closeQos":"0","closePayload":"","willTopic":"","willQos":"0","willPayload":""},{"id":"798ba952.3f8618","type":"digitaloak-postgresql-connection-manager","z":"","name":"bzdngywh:YurydegZVw_m0WjksPTQb1cmzEiV6wP2@dumbo.db.elephantsql.com:5432/bzdngywh","host":"dumbo.db.elephantsql.com","port":"5432","database":"bzdngywh","tls":"","use_tls":false,"pool_max_clients":"10","pool_client_max_idle":"10000","client_query_timeout":"","client_statement_timeout":"","client_connection_timeout_millis":"","is_client_enabled":"1"}]